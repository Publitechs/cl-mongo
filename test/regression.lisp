(in-package :cl-mongo-test)

(defvar *test-collection* "foo" "name of the test collection")

(defun force-single-float (n)
  (coerce n 'single-float))

(defun geometric-range* (base length accum factor)
  (if (zerop length)
      (mapcar #'floor (nreverse accum))
      (geometric-range* base (decf length) (cons (* (* factor base) (car accum)) accum) factor)))

(defun geometric-range (base length &optional (factor 1))
  (geometric-range* base (decf length) (list base) factor))

(defun reset-test-collection (collection size &optional (wait 0) )
  (with-mongo-connection (:host "localhost" :port *mongo-default-port* :db "test" )
    (rm collection :all)
    (let ((count (length (docs (iter (db.find collection :all))))))
      (assert-eql t (zerop count))))
  (insert-lots collection size)
  (sleep wait)
  (with-mongo-connection (:host "localhost" :port *mongo-default-port* :db "test" )
    (let ((count (length (docs (iter (db.find collection :all))))))
      (assert-eql size  count))))

;--------------------------------------------------------------------------------------
  
(defun count-documents ( &optional (collection *test-collection*) &key (size 5) )
  (reset-test-collection collection size)
  (with-mongo-connection (:host "localhost" :port *mongo-default-port* :db "test" )
    (let ((client-count (length (docs (iter (db.find collection :all)))))
	  (server-count (get-element "n" (car (docs (db.count collection :all))))))
      (format t "client count : ~A -- server count ~A ~%" client-count server-count)
      (assert-eql (force-single-float client-count) 
		  (force-single-float (float server-count))
		  "testing wether client and server count are equal")))
  (reset-test-collection collection 0))

(defun find-doc-by-field ( &optional (collection  *test-collection*) &key (size 5))
  (reset-test-collection collection size)
  (with-mongo-connection (:host "localhost" :port *mongo-default-port* :db "test" )
    (let ((found (length (docs (iter (db.find collection (kv "name" "simple")))))))
      (format t "findOne is default : ~A ~%" found)
      (assert-eql 1 found)))
  (with-mongo-connection (:host "localhost" :port *mongo-default-port* :db "test" )
    (let ((found (length (docs (iter (db.find collection (kv "name" "simple") :limit 0))))))
      (format t "limit == 0 returns all : ~A ~%" found)
      (assert-eql size found )))
  (reset-test-collection collection 0))


(defun delete-docs (&optional (collection *test-collection*) &key (size 5) )
  (reset-test-collection collection size)
  (with-mongo-connection (:host "localhost" :port *mongo-default-port* :db "test" )
    (let ((cnt (* 1.0 (get-element "n" (car (docs (db.count collection :all)))))))
      (unless (> cnt 0) (insert-lots collection size)))
    (rm collection :all)
    (let ((cnt (* 1.0 (get-element "n" (car (docs (db.count collection :all)))))))
      (assert-eql 0.0 (force-single-float cnt) "deleting all documents" size)))
  (reset-test-collection collection 0))

(defun db.find-regression-all (&optional (collection *test-collection*) &key (size 5))
  (reset-test-collection collection size 3)  
;;;test retrieval of all documents with an iterator..
  (with-mongo-connection (:host "localhost" :port *mongo-default-port* :db "test" ) 
    (let ((all (length (docs (iter (db.find "foo" :all))))))
      (assert-equal size all)))
;;; get the first document (this is not indexed so index may fail ro be equal to 0...
  (with-mongo-connection (:host "localhost" :port *mongo-default-port* :db "test" ) 
    (let* ((documents (docs (iter (db.find "foo" :all :limit 1))))
	   (index (get-element "index-this" (car documents))))
      (assert-equal 1 (length documents))
      (assert-equal 0 index "assuming first document has index 0")))
;;; test of skip; skip the first (size - floor (* size 0.5))
  (with-mongo-connection (:host "localhost" :port *mongo-default-port* :db "test" ) 
    (let* ((documents (docs (iter (db.find "foo" :all :limit 0 :skip (floor (* 0.5 size))))))
	   (skip   (floor (* 0.5 size)))
	   (first-index (get-element "index-this" (car documents)))
	   (last-index  (get-element "index-this" (car (nreverse documents))))
	   (expected-count (- size skip))
	   (expected-last-index (decf size)))
      (assert-equal expected-count (length documents))
      (assert-equal skip first-index "assuming first document has index 0")
      ;;(mapcar (lambda (d) (format t "~A;" (get-element "index-this" d))) (nreverse documents))
      (assert-equal expected-last-index last-index "assuming first document has index 0")))
  (reset-test-collection collection 0))

(defun db-sort-regression (&optional (collection *test-collection*) &key (size 5))
  (reset-test-collection collection size)  
  (with-mongo-connection (:host "localhost" :port *mongo-default-port* :db "test" ) 
    (let* ((ret (docs (iter (db.sort collection :all :field "k" :selector "k" ))))
	   (elem (mapcar (lambda (d) (get-element "k" d)) ret)))
      (format t "elem : ~A ~%" elem)
      (reduce (lambda (x y) (progn (assert-eql t (< x y) x y ) y)) elem)))
  (with-mongo-connection (:host "localhost" :port *mongo-default-port* :db "test" ) 
    (let* ((ret (docs (iter (db.sort collection :all :field "k" :selector "k"  :asc nil))))
	   (elem (mapcar (lambda (d) (get-element "k" d)) ret)))
      (format t "elem : ~A ~%" elem)
      (reduce (lambda (x y) (progn (assert-eql t (> x y) x y ) y)) elem)))
  (reset-test-collection collection 0))  

(defun map-reduce-truth (tv l)
  (reduce (lambda (x y) (and x y) ) (mapcar (lambda (x) (assert-eql tv (when x t) x)) l)))
	
(defun db-find-selector-regression (&optional (collection *test-collection*) &key (size 5))
  (reset-test-collection collection size)
  (with-mongo-connection (:host "localhost" :port *mongo-default-port* :db "test" ) 
    (let* ((ret (docs (iter (db.find collection :all :selector ($+ "k" "l") ))))
	   (ks  (mapcar (lambda (d) (get-element "k" d)) ret))
	   (ls  (mapcar (lambda (d) (get-element "l" d)) ret))
	   (excl (mapcar (lambda (d) (get-element "index-this" d)) ret)))
      (format t "elem : ~A ~%" ks)
      (assert-eql t (map-reduce-truth t ks))
      (format t "elem : ~A ~%" ls)
      (assert-eql t (map-reduce-truth t ls))
      (format t "elem : ~A ~%" excl)
      (assert-eql t (map-reduce-truth nil excl))))
  (with-mongo-connection (:host "localhost" :port *mongo-default-port* :db "test" ) 
    (let* ((ret (docs (iter (db.find collection :all :selector ($- "k" "l") ))))
	   (ks  (mapcar (lambda (d) (get-element "k" d)) ret))
	   (ls  (mapcar (lambda (d) (get-element "l" d)) ret))
	   (excl (mapcar (lambda (d) (get-element "index-this" d)) ret)))
      (format t "elem : ~A ~%" ks)
      (assert-eql t (map-reduce-truth nil ks))
      (format t "elem : ~A ~%" ls)
      (assert-eql t (map-reduce-truth nil ls))
      (format t "elem : ~A ~%" excl)
      (assert-eql t (map-reduce-truth t excl))))
  (reset-test-collection collection 0))
    
;;--------------------------------------------------------------------------

(defun test-delete (&optional (collection *test-collection*))
  (dolist (size (geometric-range 10 5 ))
    (delete-docs collection :size size)))

(defun test-query-field-selection (&optional (collection *test-collection*))
  (dolist (size (geometric-range 5 5 ))
    (find-doc-by-field *test-collection* :size size)))

(defun test-document-count (&optional (collection *test-collection*))
  (dolist (size (geometric-range 5 5 ))
    (count-documents *test-collection* :size size)))

(defun test-find-all (&optional (collection *test-collection*))
  (dolist (size (geometric-range 2 4 5 ))  
    (db.find-regression-all collection :size size)))

(defun test-sort (&optional (collection *test-collection*))
  (dolist (size (geometric-range 2 4))  
    (db-sort-regression  collection :size (* 10 size)))) 

(defun test-find-selector (&optional (collection *test-collection*))
  (dolist (size (geometric-range 2 4))  
    (db-find-selector-regression collection :size size)))

;;;;;;;;;;;;;


